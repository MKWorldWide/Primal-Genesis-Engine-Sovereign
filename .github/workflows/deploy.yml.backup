name: Deploy AthenaMist-Blended to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.13'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        pytest --cov=athenamist_integration --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r athenamist_integration deployment/
        cp requirements.txt deployment/
        cp run_web_interface.py deployment/
        cp config.py deployment/
        cp setup.py deployment/
        cp run_athenamist.sh deployment/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
        path: deployment/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Stop existing service
          sudo systemctl stop athenamist-blended || true
          
          # Create deployment directory
          sudo mkdir -p /opt/athenamist-blended
          
          # Copy deployment files
          sudo cp -r deployment/* /opt/athenamist-blended/
          
          # Set permissions
          sudo chown -R ubuntu:ubuntu /opt/athenamist-blended
          sudo chmod +x /opt/athenamist-blended/run_athenamist.sh
          
          # Create virtual environment
          cd /opt/athenamist-blended
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Create systemd service file
          sudo tee /etc/systemd/system/athenamist-blended.service > /dev/null <<EOF
          [Unit]
          Description=AthenaMist-Blended Web Interface
          After=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/athenamist-blended
          Environment=PATH=/opt/athenamist-blended/venv/bin
          ExecStart=/opt/athenamist-blended/venv/bin/python run_web_interface.py
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Reload systemd and start service
          sudo systemctl daemon-reload
          sudo systemctl enable athenamist-blended
          sudo systemctl start athenamist-blended
          
          # Check service status
          sudo systemctl status athenamist-blended
          
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.EC2_HOST }}:8000/ || exit 1
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "🌐 Application available at: http://${{ secrets.EC2_HOST }}:8000"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        exit 1 